// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rdbms

import (
	mde "alation.com/ocf/rdbms/mde"
	profiling "alation.com/ocf/rdbms/profiling"
	qle "alation.com/ocf/rdbms/qle"
	verify "alation.com/ocf/rdbms/verify"
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RdbmsClient is the client API for Rdbms service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RdbmsClient interface {
	// Verify that the connector has been configured correctly.
	ConfigurationVerification(ctx context.Context, in *verify.Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// Retrieve all objects that can be used to filter metadata extraction.
	FilterExtraction(ctx context.Context, in *mde.FilterExtractionRequest, opts ...grpc.CallOption) (Rdbms_FilterExtractionClient, error)
	// Run full or selective extraction extraction
	MetadataExtraction(ctx context.Context, in *mde.MetadataExtractionRequest, opts ...grpc.CallOption) (Rdbms_MetadataExtractionClient, error)
	// Retrieve metadata for a single Table.
	// This method is called as a downstream step to a user running a DDL statement on Compose.
	// If the connector does not support Compose, then this method does not need to be implemented.
	TableExtraction(ctx context.Context, in *mde.TableExtractionRequest, opts ...grpc.CallOption) (Rdbms_TableExtractionClient, error)
	QuerylogExtraction(ctx context.Context, in *qle.Request, opts ...grpc.CallOption) (Rdbms_QuerylogExtractionClient, error)
	TableProfiling(ctx context.Context, in *profiling.TableProfilingRequest, opts ...grpc.CallOption) (Rdbms_TableProfilingClient, error)
	ColumnProfiling(ctx context.Context, in *profiling.ColumnProfilingRequest, opts ...grpc.CallOption) (Rdbms_ColumnProfilingClient, error)
	CustomTableProfiling(ctx context.Context, in *profiling.TableProfilingRequest, opts ...grpc.CallOption) (Rdbms_CustomTableProfilingClient, error)
	CustomColumnProfiling(ctx context.Context, in *profiling.CustomColumnProfilingRequest, opts ...grpc.CallOption) (Rdbms_CustomColumnProfilingClient, error)
}

type rdbmsClient struct {
	cc grpc.ClientConnInterface
}

func NewRdbmsClient(cc grpc.ClientConnInterface) RdbmsClient {
	return &rdbmsClient{cc}
}

func (c *rdbmsClient) ConfigurationVerification(ctx context.Context, in *verify.Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/rdbms.Rdbms/ConfigurationVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rdbmsClient) FilterExtraction(ctx context.Context, in *mde.FilterExtractionRequest, opts ...grpc.CallOption) (Rdbms_FilterExtractionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[0], "/rdbms.Rdbms/FilterExtraction", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsFilterExtractionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_FilterExtractionClient interface {
	Recv() (*mde.FilterExtractionResponse, error)
	grpc.ClientStream
}

type rdbmsFilterExtractionClient struct {
	grpc.ClientStream
}

func (x *rdbmsFilterExtractionClient) Recv() (*mde.FilterExtractionResponse, error) {
	m := new(mde.FilterExtractionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) MetadataExtraction(ctx context.Context, in *mde.MetadataExtractionRequest, opts ...grpc.CallOption) (Rdbms_MetadataExtractionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[1], "/rdbms.Rdbms/MetadataExtraction", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsMetadataExtractionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_MetadataExtractionClient interface {
	Recv() (*mde.MetadataExtractionResponse, error)
	grpc.ClientStream
}

type rdbmsMetadataExtractionClient struct {
	grpc.ClientStream
}

func (x *rdbmsMetadataExtractionClient) Recv() (*mde.MetadataExtractionResponse, error) {
	m := new(mde.MetadataExtractionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) TableExtraction(ctx context.Context, in *mde.TableExtractionRequest, opts ...grpc.CallOption) (Rdbms_TableExtractionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[2], "/rdbms.Rdbms/TableExtraction", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsTableExtractionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_TableExtractionClient interface {
	Recv() (*mde.TableExtractionResponse, error)
	grpc.ClientStream
}

type rdbmsTableExtractionClient struct {
	grpc.ClientStream
}

func (x *rdbmsTableExtractionClient) Recv() (*mde.TableExtractionResponse, error) {
	m := new(mde.TableExtractionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) QuerylogExtraction(ctx context.Context, in *qle.Request, opts ...grpc.CallOption) (Rdbms_QuerylogExtractionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[3], "/rdbms.Rdbms/QuerylogExtraction", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsQuerylogExtractionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_QuerylogExtractionClient interface {
	Recv() (*qle.Response, error)
	grpc.ClientStream
}

type rdbmsQuerylogExtractionClient struct {
	grpc.ClientStream
}

func (x *rdbmsQuerylogExtractionClient) Recv() (*qle.Response, error) {
	m := new(qle.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) TableProfiling(ctx context.Context, in *profiling.TableProfilingRequest, opts ...grpc.CallOption) (Rdbms_TableProfilingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[4], "/rdbms.Rdbms/TableProfiling", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsTableProfilingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_TableProfilingClient interface {
	Recv() (*profiling.TableProfilingResponse, error)
	grpc.ClientStream
}

type rdbmsTableProfilingClient struct {
	grpc.ClientStream
}

func (x *rdbmsTableProfilingClient) Recv() (*profiling.TableProfilingResponse, error) {
	m := new(profiling.TableProfilingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) ColumnProfiling(ctx context.Context, in *profiling.ColumnProfilingRequest, opts ...grpc.CallOption) (Rdbms_ColumnProfilingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[5], "/rdbms.Rdbms/ColumnProfiling", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsColumnProfilingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_ColumnProfilingClient interface {
	Recv() (*profiling.ColumnProfilingResponse, error)
	grpc.ClientStream
}

type rdbmsColumnProfilingClient struct {
	grpc.ClientStream
}

func (x *rdbmsColumnProfilingClient) Recv() (*profiling.ColumnProfilingResponse, error) {
	m := new(profiling.ColumnProfilingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) CustomTableProfiling(ctx context.Context, in *profiling.TableProfilingRequest, opts ...grpc.CallOption) (Rdbms_CustomTableProfilingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[6], "/rdbms.Rdbms/CustomTableProfiling", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsCustomTableProfilingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_CustomTableProfilingClient interface {
	Recv() (*profiling.CustomTableProfilingResponse, error)
	grpc.ClientStream
}

type rdbmsCustomTableProfilingClient struct {
	grpc.ClientStream
}

func (x *rdbmsCustomTableProfilingClient) Recv() (*profiling.CustomTableProfilingResponse, error) {
	m := new(profiling.CustomTableProfilingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rdbmsClient) CustomColumnProfiling(ctx context.Context, in *profiling.CustomColumnProfilingRequest, opts ...grpc.CallOption) (Rdbms_CustomColumnProfilingClient, error) {
	stream, err := c.cc.NewStream(ctx, &Rdbms_ServiceDesc.Streams[7], "/rdbms.Rdbms/CustomColumnProfiling", opts...)
	if err != nil {
		return nil, err
	}
	x := &rdbmsCustomColumnProfilingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Rdbms_CustomColumnProfilingClient interface {
	Recv() (*profiling.ColumnProfilingResponse, error)
	grpc.ClientStream
}

type rdbmsCustomColumnProfilingClient struct {
	grpc.ClientStream
}

func (x *rdbmsCustomColumnProfilingClient) Recv() (*profiling.ColumnProfilingResponse, error) {
	m := new(profiling.ColumnProfilingResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RdbmsServer is the server API for Rdbms service.
// All implementations must embed UnimplementedRdbmsServer
// for forward compatibility
type RdbmsServer interface {
	// Verify that the connector has been configured correctly.
	ConfigurationVerification(context.Context, *verify.Request) (*empty.Empty, error)
	// Retrieve all objects that can be used to filter metadata extraction.
	FilterExtraction(*mde.FilterExtractionRequest, Rdbms_FilterExtractionServer) error
	// Run full or selective extraction extraction
	MetadataExtraction(*mde.MetadataExtractionRequest, Rdbms_MetadataExtractionServer) error
	// Retrieve metadata for a single Table.
	// This method is called as a downstream step to a user running a DDL statement on Compose.
	// If the connector does not support Compose, then this method does not need to be implemented.
	TableExtraction(*mde.TableExtractionRequest, Rdbms_TableExtractionServer) error
	QuerylogExtraction(*qle.Request, Rdbms_QuerylogExtractionServer) error
	TableProfiling(*profiling.TableProfilingRequest, Rdbms_TableProfilingServer) error
	ColumnProfiling(*profiling.ColumnProfilingRequest, Rdbms_ColumnProfilingServer) error
	CustomTableProfiling(*profiling.TableProfilingRequest, Rdbms_CustomTableProfilingServer) error
	CustomColumnProfiling(*profiling.CustomColumnProfilingRequest, Rdbms_CustomColumnProfilingServer) error
	mustEmbedUnimplementedRdbmsServer()
}

// UnimplementedRdbmsServer must be embedded to have forward compatible implementations.
type UnimplementedRdbmsServer struct {
}

func (UnimplementedRdbmsServer) ConfigurationVerification(context.Context, *verify.Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigurationVerification not implemented")
}
func (UnimplementedRdbmsServer) FilterExtraction(*mde.FilterExtractionRequest, Rdbms_FilterExtractionServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterExtraction not implemented")
}
func (UnimplementedRdbmsServer) MetadataExtraction(*mde.MetadataExtractionRequest, Rdbms_MetadataExtractionServer) error {
	return status.Errorf(codes.Unimplemented, "method MetadataExtraction not implemented")
}
func (UnimplementedRdbmsServer) TableExtraction(*mde.TableExtractionRequest, Rdbms_TableExtractionServer) error {
	return status.Errorf(codes.Unimplemented, "method TableExtraction not implemented")
}
func (UnimplementedRdbmsServer) QuerylogExtraction(*qle.Request, Rdbms_QuerylogExtractionServer) error {
	return status.Errorf(codes.Unimplemented, "method QuerylogExtraction not implemented")
}
func (UnimplementedRdbmsServer) TableProfiling(*profiling.TableProfilingRequest, Rdbms_TableProfilingServer) error {
	return status.Errorf(codes.Unimplemented, "method TableProfiling not implemented")
}
func (UnimplementedRdbmsServer) ColumnProfiling(*profiling.ColumnProfilingRequest, Rdbms_ColumnProfilingServer) error {
	return status.Errorf(codes.Unimplemented, "method ColumnProfiling not implemented")
}
func (UnimplementedRdbmsServer) CustomTableProfiling(*profiling.TableProfilingRequest, Rdbms_CustomTableProfilingServer) error {
	return status.Errorf(codes.Unimplemented, "method CustomTableProfiling not implemented")
}
func (UnimplementedRdbmsServer) CustomColumnProfiling(*profiling.CustomColumnProfilingRequest, Rdbms_CustomColumnProfilingServer) error {
	return status.Errorf(codes.Unimplemented, "method CustomColumnProfiling not implemented")
}
func (UnimplementedRdbmsServer) mustEmbedUnimplementedRdbmsServer() {}

// UnsafeRdbmsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RdbmsServer will
// result in compilation errors.
type UnsafeRdbmsServer interface {
	mustEmbedUnimplementedRdbmsServer()
}

func RegisterRdbmsServer(s grpc.ServiceRegistrar, srv RdbmsServer) {
	s.RegisterService(&Rdbms_ServiceDesc, srv)
}

func _Rdbms_ConfigurationVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(verify.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RdbmsServer).ConfigurationVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rdbms.Rdbms/ConfigurationVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RdbmsServer).ConfigurationVerification(ctx, req.(*verify.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rdbms_FilterExtraction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(mde.FilterExtractionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).FilterExtraction(m, &rdbmsFilterExtractionServer{stream})
}

type Rdbms_FilterExtractionServer interface {
	Send(*mde.FilterExtractionResponse) error
	grpc.ServerStream
}

type rdbmsFilterExtractionServer struct {
	grpc.ServerStream
}

func (x *rdbmsFilterExtractionServer) Send(m *mde.FilterExtractionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_MetadataExtraction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(mde.MetadataExtractionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).MetadataExtraction(m, &rdbmsMetadataExtractionServer{stream})
}

type Rdbms_MetadataExtractionServer interface {
	Send(*mde.MetadataExtractionResponse) error
	grpc.ServerStream
}

type rdbmsMetadataExtractionServer struct {
	grpc.ServerStream
}

func (x *rdbmsMetadataExtractionServer) Send(m *mde.MetadataExtractionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_TableExtraction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(mde.TableExtractionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).TableExtraction(m, &rdbmsTableExtractionServer{stream})
}

type Rdbms_TableExtractionServer interface {
	Send(*mde.TableExtractionResponse) error
	grpc.ServerStream
}

type rdbmsTableExtractionServer struct {
	grpc.ServerStream
}

func (x *rdbmsTableExtractionServer) Send(m *mde.TableExtractionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_QuerylogExtraction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(qle.Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).QuerylogExtraction(m, &rdbmsQuerylogExtractionServer{stream})
}

type Rdbms_QuerylogExtractionServer interface {
	Send(*qle.Response) error
	grpc.ServerStream
}

type rdbmsQuerylogExtractionServer struct {
	grpc.ServerStream
}

func (x *rdbmsQuerylogExtractionServer) Send(m *qle.Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_TableProfiling_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(profiling.TableProfilingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).TableProfiling(m, &rdbmsTableProfilingServer{stream})
}

type Rdbms_TableProfilingServer interface {
	Send(*profiling.TableProfilingResponse) error
	grpc.ServerStream
}

type rdbmsTableProfilingServer struct {
	grpc.ServerStream
}

func (x *rdbmsTableProfilingServer) Send(m *profiling.TableProfilingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_ColumnProfiling_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(profiling.ColumnProfilingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).ColumnProfiling(m, &rdbmsColumnProfilingServer{stream})
}

type Rdbms_ColumnProfilingServer interface {
	Send(*profiling.ColumnProfilingResponse) error
	grpc.ServerStream
}

type rdbmsColumnProfilingServer struct {
	grpc.ServerStream
}

func (x *rdbmsColumnProfilingServer) Send(m *profiling.ColumnProfilingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_CustomTableProfiling_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(profiling.TableProfilingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).CustomTableProfiling(m, &rdbmsCustomTableProfilingServer{stream})
}

type Rdbms_CustomTableProfilingServer interface {
	Send(*profiling.CustomTableProfilingResponse) error
	grpc.ServerStream
}

type rdbmsCustomTableProfilingServer struct {
	grpc.ServerStream
}

func (x *rdbmsCustomTableProfilingServer) Send(m *profiling.CustomTableProfilingResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Rdbms_CustomColumnProfiling_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(profiling.CustomColumnProfilingRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RdbmsServer).CustomColumnProfiling(m, &rdbmsCustomColumnProfilingServer{stream})
}

type Rdbms_CustomColumnProfilingServer interface {
	Send(*profiling.ColumnProfilingResponse) error
	grpc.ServerStream
}

type rdbmsCustomColumnProfilingServer struct {
	grpc.ServerStream
}

func (x *rdbmsCustomColumnProfilingServer) Send(m *profiling.ColumnProfilingResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Rdbms_ServiceDesc is the grpc.ServiceDesc for Rdbms service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Rdbms_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rdbms.Rdbms",
	HandlerType: (*RdbmsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigurationVerification",
			Handler:    _Rdbms_ConfigurationVerification_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FilterExtraction",
			Handler:       _Rdbms_FilterExtraction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MetadataExtraction",
			Handler:       _Rdbms_MetadataExtraction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TableExtraction",
			Handler:       _Rdbms_TableExtraction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QuerylogExtraction",
			Handler:       _Rdbms_QuerylogExtraction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TableProfiling",
			Handler:       _Rdbms_TableProfiling_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ColumnProfiling",
			Handler:       _Rdbms_ColumnProfiling_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CustomTableProfiling",
			Handler:       _Rdbms_CustomTableProfiling_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CustomColumnProfiling",
			Handler:       _Rdbms_CustomColumnProfiling_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rdbms.proto",
}
