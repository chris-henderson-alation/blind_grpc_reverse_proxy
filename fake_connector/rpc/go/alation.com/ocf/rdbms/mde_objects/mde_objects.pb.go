// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: mde_objects.proto

package mde_objects

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// --------------------------------------------------  Common  ---------------------------------------------------
type Otype int32

const (
	Otype_DATABASE_CATALOG Otype = 0
	Otype_SCHEMA           Otype = 1
	Otype_TABLE            Otype = 2
	Otype_COLUMN           Otype = 3
	Otype_FUNCTION         Otype = 4
)

// Enum value maps for Otype.
var (
	Otype_name = map[int32]string{
		0: "DATABASE_CATALOG",
		1: "SCHEMA",
		2: "TABLE",
		3: "COLUMN",
		4: "FUNCTION",
	}
	Otype_value = map[string]int32{
		"DATABASE_CATALOG": 0,
		"SCHEMA":           1,
		"TABLE":            2,
		"COLUMN":           3,
		"FUNCTION":         4,
	}
)

func (x Otype) Enum() *Otype {
	p := new(Otype)
	*p = x
	return p
}

func (x Otype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Otype) Descriptor() protoreflect.EnumDescriptor {
	return file_mde_objects_proto_enumTypes[0].Descriptor()
}

func (Otype) Type() protoreflect.EnumType {
	return &file_mde_objects_proto_enumTypes[0]
}

func (x Otype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Otype.Descriptor instead.
func (Otype) EnumDescriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{0}
}

// Visible on the properties section of the catalog page
// Default value = TABLE
type TableType_NormalizedType int32

const (
	TableType_TABLE TableType_NormalizedType = 0
	TableType_VIEW  TableType_NormalizedType = 1
	// Python side 2 is assigned to UNKNOWN.
	TableType_SYNONYM TableType_NormalizedType = 3
)

// Enum value maps for TableType_NormalizedType.
var (
	TableType_NormalizedType_name = map[int32]string{
		0: "TABLE",
		1: "VIEW",
		3: "SYNONYM",
	}
	TableType_NormalizedType_value = map[string]int32{
		"TABLE":   0,
		"VIEW":    1,
		"SYNONYM": 3,
	}
)

func (x TableType_NormalizedType) Enum() *TableType_NormalizedType {
	p := new(TableType_NormalizedType)
	*p = x
	return p
}

func (x TableType_NormalizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableType_NormalizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_mde_objects_proto_enumTypes[1].Descriptor()
}

func (TableType_NormalizedType) Type() protoreflect.EnumType {
	return &file_mde_objects_proto_enumTypes[1]
}

func (x TableType_NormalizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableType_NormalizedType.Descriptor instead.
func (TableType_NormalizedType) EnumDescriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{8, 0}
}

// The normalized version is not visible on the catalog pages.
// But it is used to fine tune feature behavior (e.g. Compose), when they interact with a Column
type ColumnType_NormalizedType int32

const (
	ColumnType_OTHER     ColumnType_NormalizedType = 0
	ColumnType_BOOL      ColumnType_NormalizedType = 1
	ColumnType_DATE      ColumnType_NormalizedType = 2
	ColumnType_INT       ColumnType_NormalizedType = 3
	ColumnType_FLOAT     ColumnType_NormalizedType = 4
	ColumnType_STRING    ColumnType_NormalizedType = 5
	ColumnType_TIME      ColumnType_NormalizedType = 6
	ColumnType_TIMESTAMP ColumnType_NormalizedType = 7
)

// Enum value maps for ColumnType_NormalizedType.
var (
	ColumnType_NormalizedType_name = map[int32]string{
		0: "OTHER",
		1: "BOOL",
		2: "DATE",
		3: "INT",
		4: "FLOAT",
		5: "STRING",
		6: "TIME",
		7: "TIMESTAMP",
	}
	ColumnType_NormalizedType_value = map[string]int32{
		"OTHER":     0,
		"BOOL":      1,
		"DATE":      2,
		"INT":       3,
		"FLOAT":     4,
		"STRING":    5,
		"TIME":      6,
		"TIMESTAMP": 7,
	}
)

func (x ColumnType_NormalizedType) Enum() *ColumnType_NormalizedType {
	p := new(ColumnType_NormalizedType)
	*p = x
	return p
}

func (x ColumnType_NormalizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnType_NormalizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_mde_objects_proto_enumTypes[2].Descriptor()
}

func (ColumnType_NormalizedType) Type() protoreflect.EnumType {
	return &file_mde_objects_proto_enumTypes[2]
}

func (x ColumnType_NormalizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnType_NormalizedType.Descriptor instead.
func (ColumnType_NormalizedType) EnumDescriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{11, 0}
}

type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name as it appears on the remote source.
	Original string `protobuf:"bytes,1,opt,name=original,proto3" json:"original,omitempty"`
	// Optional
	// The normalized name is used by Alation to uniquely identify an object.
	// If not provided Alation will generate it. E.g. lowercase every character and, escape quotes
	Normalized string `protobuf:"bytes,2,opt,name=normalized,proto3" json:"normalized,omitempty"`
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{0}
}

func (x *Name) GetOriginal() string {
	if x != nil {
		return x.Original
	}
	return ""
}

func (x *Name) GetNormalized() string {
	if x != nil {
		return x.Normalized
	}
	return ""
}

type DatabaseCatalogId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *Name `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DatabaseCatalogId) Reset() {
	*x = DatabaseCatalogId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseCatalogId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseCatalogId) ProtoMessage() {}

func (x *DatabaseCatalogId) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseCatalogId.ProtoReflect.Descriptor instead.
func (*DatabaseCatalogId) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseCatalogId) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

type SchemaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseCatalog *Name `protobuf:"bytes,1,opt,name=databaseCatalog,proto3" json:"databaseCatalog,omitempty"`
	Name            *Name `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SchemaId) Reset() {
	*x = SchemaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaId) ProtoMessage() {}

func (x *SchemaId) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaId.ProtoReflect.Descriptor instead.
func (*SchemaId) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{2}
}

func (x *SchemaId) GetDatabaseCatalog() *Name {
	if x != nil {
		return x.DatabaseCatalog
	}
	return nil
}

func (x *SchemaId) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

type TableId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseCatalog *Name `protobuf:"bytes,1,opt,name=databaseCatalog,proto3" json:"databaseCatalog,omitempty"`
	Schema          *Name `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name            *Name `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TableId) Reset() {
	*x = TableId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableId) ProtoMessage() {}

func (x *TableId) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableId.ProtoReflect.Descriptor instead.
func (*TableId) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{3}
}

func (x *TableId) GetDatabaseCatalog() *Name {
	if x != nil {
		return x.DatabaseCatalog
	}
	return nil
}

func (x *TableId) GetSchema() *Name {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *TableId) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

type ColumnId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseCatalog *Name `protobuf:"bytes,1,opt,name=databaseCatalog,proto3" json:"databaseCatalog,omitempty"`
	Schema          *Name `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Table           *Name `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	Name            *Name `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ColumnId) Reset() {
	*x = ColumnId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnId) ProtoMessage() {}

func (x *ColumnId) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnId.ProtoReflect.Descriptor instead.
func (*ColumnId) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{4}
}

func (x *ColumnId) GetDatabaseCatalog() *Name {
	if x != nil {
		return x.DatabaseCatalog
	}
	return nil
}

func (x *ColumnId) GetSchema() *Name {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ColumnId) GetTable() *Name {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *ColumnId) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

type FunctionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DatabaseCatalog *Name `protobuf:"bytes,1,opt,name=databaseCatalog,proto3" json:"databaseCatalog,omitempty"`
	Schema          *Name `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name            *Name `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FunctionId) Reset() {
	*x = FunctionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionId) ProtoMessage() {}

func (x *FunctionId) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionId.ProtoReflect.Descriptor instead.
func (*FunctionId) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{5}
}

func (x *FunctionId) GetDatabaseCatalog() *Name {
	if x != nil {
		return x.DatabaseCatalog
	}
	return nil
}

func (x *FunctionId) GetSchema() *Name {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *FunctionId) GetName() *Name {
	if x != nil {
		return x.Name
	}
	return nil
}

// ---------------------------------------------  Database Catalog  ----------------------------------------------
type DatabaseCatalog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *DatabaseCatalogId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceComment string             `protobuf:"bytes,2,opt,name=sourceComment,proto3" json:"sourceComment,omitempty"`
}

func (x *DatabaseCatalog) Reset() {
	*x = DatabaseCatalog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseCatalog) ProtoMessage() {}

func (x *DatabaseCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseCatalog.ProtoReflect.Descriptor instead.
func (*DatabaseCatalog) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{6}
}

func (x *DatabaseCatalog) GetId() *DatabaseCatalogId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DatabaseCatalog) GetSourceComment() string {
	if x != nil {
		return x.SourceComment
	}
	return ""
}

// --------------------------------------------------  Schema  ---------------------------------------------------
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *SchemaId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceComment string    `protobuf:"bytes,2,opt,name=sourceComment,proto3" json:"sourceComment,omitempty"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{7}
}

func (x *Schema) GetId() *SchemaId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Schema) GetSourceComment() string {
	if x != nil {
		return x.SourceComment
	}
	return ""
}

// ---------------------------------------------------  Table  ---------------------------------------------------
type TableType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional
	// The datasource specific type name e.g. MATERIALIZED_VIEW, EXTERNAL_TABLE, ...
	// The name will show up on the Table's properties.
	Name       string                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Normalized TableType_NormalizedType `protobuf:"varint,3,opt,name=normalized,proto3,enum=rdbms.mde_objects.TableType_NormalizedType" json:"normalized,omitempty"`
}

func (x *TableType) Reset() {
	*x = TableType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableType) ProtoMessage() {}

func (x *TableType) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableType.ProtoReflect.Descriptor instead.
func (*TableType) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{8}
}

func (x *TableType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableType) GetNormalized() TableType_NormalizedType {
	if x != nil {
		return x.Normalized
	}
	return TableType_TABLE
}

type Partition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// E.g. comments, SQL Definition. SQL queries will be highlighted on the UI.
	Definition string `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	// The columns that the partition is over. The information will show under the table's properties
	Columns []*ColumnId `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *Partition) Reset() {
	*x = Partition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Partition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Partition) ProtoMessage() {}

func (x *Partition) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Partition.ProtoReflect.Descriptor instead.
func (*Partition) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{9}
}

func (x *Partition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Partition) GetColumns() []*ColumnId {
	if x != nil {
		return x.Columns
	}
	return nil
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *TableId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceComment string     `protobuf:"bytes,2,opt,name=sourceComment,proto3" json:"sourceComment,omitempty"`
	Type          *TableType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Optional
	// The DDL definition for the Table object.
	Ddl string `protobuf:"bytes,4,opt,name=ddl,proto3" json:"ddl,omitempty"`
	// Optional
	Partition *Partition `protobuf:"bytes,5,opt,name=partition,proto3" json:"partition,omitempty"`
	// Required only for synonym
	// If this The table that this synonym is aliasing.
	BaseTable *TableId `protobuf:"bytes,6,opt,name=baseTable,proto3" json:"baseTable,omitempty"`
	// The table's owner/creator
	Owner string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{10}
}

func (x *Table) GetId() *TableId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Table) GetSourceComment() string {
	if x != nil {
		return x.SourceComment
	}
	return ""
}

func (x *Table) GetType() *TableType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Table) GetDdl() string {
	if x != nil {
		return x.Ddl
	}
	return ""
}

func (x *Table) GetPartition() *Partition {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *Table) GetBaseTable() *TableId {
	if x != nil {
		return x.BaseTable
	}
	return nil
}

func (x *Table) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

// --------------------------------------------------  Column  ---------------------------------------------------
type ColumnType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The datasource specific type name e.g. int, int32, float, struct, customer_order
	// The name will show up on the Column's properties and on the Table's columns summary
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// In case of complex or user defined data type (e.g. struct, customer_order),
	// use this field to provide a detailed description of the type.
	// E.g. the definition of the customer_order type can be: {name: text, supplier_id: integer, price:numeric}
	// This field will show up on the properties section on the Attribute catalog page.
	Definition string                    `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	Normalized ColumnType_NormalizedType `protobuf:"varint,3,opt,name=normalized,proto3,enum=rdbms.mde_objects.ColumnType_NormalizedType" json:"normalized,omitempty"`
}

func (x *ColumnType) Reset() {
	*x = ColumnType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnType) ProtoMessage() {}

func (x *ColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnType.ProtoReflect.Descriptor instead.
func (*ColumnType) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{11}
}

func (x *ColumnType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnType) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *ColumnType) GetNormalized() ColumnType_NormalizedType {
	if x != nil {
		return x.Normalized
	}
	return ColumnType_OTHER
}

// TableIndexingInfo marks a given column as (optionally) playing some role in the database's indexing scheme
// (e.g. being a primary/foreign key).
// Each one of the following flags, will translate into an icon next to the Column's name on the Column page
// or the Table catalog page
type TableIndexingInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If True, then the Column is part of a primary key
	// Default value = False
	IsPrimaryKey bool `protobuf:"varint,1,opt,name=isPrimaryKey,proto3" json:"isPrimaryKey,omitempty"`
	// If True, then this Column is part of a foreign key
	// Default value = False
	IsForeignKey bool `protobuf:"varint,2,opt,name=isForeignKey,proto3" json:"isForeignKey,omitempty"`
	// If the Column is a foreign key, this field links it to the referenced column.
	ReferencedColumnId *ColumnId `protobuf:"bytes,3,opt,name=referencedColumnId,proto3" json:"referencedColumnId,omitempty"`
	// If True, then this Column is part of a index, that it is not a primary or foreign key
	// Default value = False
	IsOtherIndex bool `protobuf:"varint,4,opt,name=isOtherIndex,proto3" json:"isOtherIndex,omitempty"`
}

func (x *TableIndexingInfo) Reset() {
	*x = TableIndexingInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIndexingInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIndexingInfo) ProtoMessage() {}

func (x *TableIndexingInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIndexingInfo.ProtoReflect.Descriptor instead.
func (*TableIndexingInfo) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{12}
}

func (x *TableIndexingInfo) GetIsPrimaryKey() bool {
	if x != nil {
		return x.IsPrimaryKey
	}
	return false
}

func (x *TableIndexingInfo) GetIsForeignKey() bool {
	if x != nil {
		return x.IsForeignKey
	}
	return false
}

func (x *TableIndexingInfo) GetReferencedColumnId() *ColumnId {
	if x != nil {
		return x.ReferencedColumnId
	}
	return nil
}

func (x *TableIndexingInfo) GetIsOtherIndex() bool {
	if x != nil {
		return x.IsOtherIndex
	}
	return false
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *ColumnId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceComment string      `protobuf:"bytes,2,opt,name=sourceComment,proto3" json:"sourceComment,omitempty"`
	Type          *ColumnType `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The column's position the Table
	// Dictates the ordering of columns when a Table catalog page is first rendered
	Position int32 `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	// Default value = False
	// When a column is not nullable the information shows on the Column's properties section.
	IsNullable bool               `protobuf:"varint,5,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	IndexInfo  *TableIndexingInfo `protobuf:"bytes,6,opt,name=indexInfo,proto3" json:"indexInfo,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{13}
}

func (x *Column) GetId() *ColumnId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Column) GetSourceComment() string {
	if x != nil {
		return x.SourceComment
	}
	return ""
}

func (x *Column) GetType() *ColumnType {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Column) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Column) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *Column) GetIndexInfo() *TableIndexingInfo {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

// --------------------------------------------------  Function  -------------------------------------------------
type Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            *FunctionId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceComment string      `protobuf:"bytes,2,opt,name=sourceComment,proto3" json:"sourceComment,omitempty"`
	// For instance the function signature can be organized
	// function: return_type FUNCTION_NAME '(' arguments ')'
	// return_type: string | '(' string (',' string ')' )*
	// arguments: string (',' string ')')*
	Signatures []string `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *Function) Reset() {
	*x = Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mde_objects_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_mde_objects_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_mde_objects_proto_rawDescGZIP(), []int{14}
}

func (x *Function) GetId() *FunctionId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Function) GetSourceComment() string {
	if x != nil {
		return x.SourceComment
	}
	return ""
}

func (x *Function) GetSignatures() []string {
	if x != nil {
		return x.Signatures
	}
	return nil
}

var File_mde_objects_proto protoreflect.FileDescriptor

var file_mde_objects_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x11, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x42, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f,
	0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x40, 0x0a, 0x11, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x08,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2b, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d,
	0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e,
	0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d,
	0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64,
	0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2d, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0a, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62,
	0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x34, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x5b, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x2b, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e,
	0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa0,
	0x01, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4b, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x22, 0x32, 0x0a,
	0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x59, 0x4e, 0x4f, 0x4e, 0x59, 0x4d, 0x10,
	0x03, 0x22, 0x62, 0x0a, 0x09, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35,
	0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x52, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x64,
	0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x64, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x64, 0x64, 0x6c, 0x12, 0x3a, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73,
	0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x52, 0x09, 0x62, 0x61, 0x73, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x22, 0xf8, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73,
	0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x22, 0x68, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e,
	0x47, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x07, 0x22, 0xcc, 0x01, 0x0a,
	0x11, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73,
	0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d,
	0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x49, 0x64, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x4f, 0x74, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69,
	0x73, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x8e, 0x02, 0x0a, 0x06,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e,
	0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x64,
	0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7f, 0x0a, 0x08,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x6d, 0x64, 0x65,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2a, 0x4e, 0x0a,
	0x05, 0x4f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x42, 0x4c, 0x0a,
	0x14, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x6d, 0x64, 0x65, 0x42, 0x0f, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x01, 0x5a, 0x21, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x63, 0x66, 0x2f, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2f,
	0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_mde_objects_proto_rawDescOnce sync.Once
	file_mde_objects_proto_rawDescData = file_mde_objects_proto_rawDesc
)

func file_mde_objects_proto_rawDescGZIP() []byte {
	file_mde_objects_proto_rawDescOnce.Do(func() {
		file_mde_objects_proto_rawDescData = protoimpl.X.CompressGZIP(file_mde_objects_proto_rawDescData)
	})
	return file_mde_objects_proto_rawDescData
}

var file_mde_objects_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_mde_objects_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_mde_objects_proto_goTypes = []interface{}{
	(Otype)(0),                     // 0: rdbms.mde_objects.Otype
	(TableType_NormalizedType)(0),  // 1: rdbms.mde_objects.TableType.NormalizedType
	(ColumnType_NormalizedType)(0), // 2: rdbms.mde_objects.ColumnType.NormalizedType
	(*Name)(nil),                   // 3: rdbms.mde_objects.Name
	(*DatabaseCatalogId)(nil),      // 4: rdbms.mde_objects.DatabaseCatalogId
	(*SchemaId)(nil),               // 5: rdbms.mde_objects.SchemaId
	(*TableId)(nil),                // 6: rdbms.mde_objects.TableId
	(*ColumnId)(nil),               // 7: rdbms.mde_objects.ColumnId
	(*FunctionId)(nil),             // 8: rdbms.mde_objects.FunctionId
	(*DatabaseCatalog)(nil),        // 9: rdbms.mde_objects.DatabaseCatalog
	(*Schema)(nil),                 // 10: rdbms.mde_objects.Schema
	(*TableType)(nil),              // 11: rdbms.mde_objects.TableType
	(*Partition)(nil),              // 12: rdbms.mde_objects.Partition
	(*Table)(nil),                  // 13: rdbms.mde_objects.Table
	(*ColumnType)(nil),             // 14: rdbms.mde_objects.ColumnType
	(*TableIndexingInfo)(nil),      // 15: rdbms.mde_objects.TableIndexingInfo
	(*Column)(nil),                 // 16: rdbms.mde_objects.Column
	(*Function)(nil),               // 17: rdbms.mde_objects.Function
}
var file_mde_objects_proto_depIdxs = []int32{
	3,  // 0: rdbms.mde_objects.DatabaseCatalogId.name:type_name -> rdbms.mde_objects.Name
	3,  // 1: rdbms.mde_objects.SchemaId.databaseCatalog:type_name -> rdbms.mde_objects.Name
	3,  // 2: rdbms.mde_objects.SchemaId.name:type_name -> rdbms.mde_objects.Name
	3,  // 3: rdbms.mde_objects.TableId.databaseCatalog:type_name -> rdbms.mde_objects.Name
	3,  // 4: rdbms.mde_objects.TableId.schema:type_name -> rdbms.mde_objects.Name
	3,  // 5: rdbms.mde_objects.TableId.name:type_name -> rdbms.mde_objects.Name
	3,  // 6: rdbms.mde_objects.ColumnId.databaseCatalog:type_name -> rdbms.mde_objects.Name
	3,  // 7: rdbms.mde_objects.ColumnId.schema:type_name -> rdbms.mde_objects.Name
	3,  // 8: rdbms.mde_objects.ColumnId.table:type_name -> rdbms.mde_objects.Name
	3,  // 9: rdbms.mde_objects.ColumnId.name:type_name -> rdbms.mde_objects.Name
	3,  // 10: rdbms.mde_objects.FunctionId.databaseCatalog:type_name -> rdbms.mde_objects.Name
	3,  // 11: rdbms.mde_objects.FunctionId.schema:type_name -> rdbms.mde_objects.Name
	3,  // 12: rdbms.mde_objects.FunctionId.name:type_name -> rdbms.mde_objects.Name
	4,  // 13: rdbms.mde_objects.DatabaseCatalog.id:type_name -> rdbms.mde_objects.DatabaseCatalogId
	5,  // 14: rdbms.mde_objects.Schema.id:type_name -> rdbms.mde_objects.SchemaId
	1,  // 15: rdbms.mde_objects.TableType.normalized:type_name -> rdbms.mde_objects.TableType.NormalizedType
	7,  // 16: rdbms.mde_objects.Partition.columns:type_name -> rdbms.mde_objects.ColumnId
	6,  // 17: rdbms.mde_objects.Table.id:type_name -> rdbms.mde_objects.TableId
	11, // 18: rdbms.mde_objects.Table.type:type_name -> rdbms.mde_objects.TableType
	12, // 19: rdbms.mde_objects.Table.partition:type_name -> rdbms.mde_objects.Partition
	6,  // 20: rdbms.mde_objects.Table.baseTable:type_name -> rdbms.mde_objects.TableId
	2,  // 21: rdbms.mde_objects.ColumnType.normalized:type_name -> rdbms.mde_objects.ColumnType.NormalizedType
	7,  // 22: rdbms.mde_objects.TableIndexingInfo.referencedColumnId:type_name -> rdbms.mde_objects.ColumnId
	7,  // 23: rdbms.mde_objects.Column.id:type_name -> rdbms.mde_objects.ColumnId
	14, // 24: rdbms.mde_objects.Column.type:type_name -> rdbms.mde_objects.ColumnType
	15, // 25: rdbms.mde_objects.Column.indexInfo:type_name -> rdbms.mde_objects.TableIndexingInfo
	8,  // 26: rdbms.mde_objects.Function.id:type_name -> rdbms.mde_objects.FunctionId
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_mde_objects_proto_init() }
func file_mde_objects_proto_init() {
	if File_mde_objects_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mde_objects_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseCatalogId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseCatalog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Partition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIndexingInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mde_objects_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mde_objects_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mde_objects_proto_goTypes,
		DependencyIndexes: file_mde_objects_proto_depIdxs,
		EnumInfos:         file_mde_objects_proto_enumTypes,
		MessageInfos:      file_mde_objects_proto_msgTypes,
	}.Build()
	File_mde_objects_proto = out.File
	file_mde_objects_proto_rawDesc = nil
	file_mde_objects_proto_goTypes = nil
	file_mde_objects_proto_depIdxs = nil
}
