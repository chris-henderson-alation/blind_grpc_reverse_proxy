// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: profiling.proto

package profiling

import (
	auth "alation.com/ocf/rdbms/auth"
	common "alation.com/ocf/rdbms/common"
	mde_objects "alation.com/ocf/rdbms/mde_objects"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

/// ----------------------------------------------- Extract Filter ------------------------------------------------
type TableProfilingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *common.ProtobufConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	TableRequests []*TableRequest               `protobuf:"bytes,2,rep,name=tableRequests,proto3" json:"tableRequests,omitempty"`
	Auth          *auth.Auth                    `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *TableProfilingRequest) Reset() {
	*x = TableProfilingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableProfilingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableProfilingRequest) ProtoMessage() {}

func (x *TableProfilingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableProfilingRequest.ProtoReflect.Descriptor instead.
func (*TableProfilingRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{0}
}

func (x *TableProfilingRequest) GetConfiguration() *common.ProtobufConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *TableProfilingRequest) GetTableRequests() []*TableRequest {
	if x != nil {
		return x.TableRequests
	}
	return nil
}

func (x *TableProfilingRequest) GetAuth() *auth.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type TableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The primary key of the table within Alation.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the table as it appears in the datasource.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the schema as it appears in the datasource.
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// The population size of the sample.
	PopulationSize uint32 `protobuf:"varint,4,opt,name=populationSize,proto3" json:"populationSize,omitempty"`
	// The sample size of the sample.
	SampleSize uint32 `protobuf:"varint,5,opt,name=sampleSize,proto3" json:"sampleSize,omitempty"`
	// A list of columns that contain sensitive data.
	// The values within this column MUST NOT be returned
	// under any circumstances. Instead, they should have
	// redaction placeholders in their index (E.G. "[[HIDDEN]]")
	SensitiveColumns []*Column `protobuf:"bytes,7,rep,name=sensitiveColumns,proto3" json:"sensitiveColumns,omitempty"`
	// A list of all known columns for this table.
	// THIS LIST INCLUDES THE SENSITIVE COLUMNS AS WELL!
	Columns []*Column `protobuf:"bytes,8,rep,name=columns,proto3" json:"columns,omitempty"`
	// The timeout for a given sampling query (in seconds).
	Timeout uint32 `protobuf:"varint,9,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *TableRequest) Reset() {
	*x = TableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRequest) ProtoMessage() {}

func (x *TableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRequest.ProtoReflect.Descriptor instead.
func (*TableRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{1}
}

func (x *TableRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TableRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableRequest) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TableRequest) GetPopulationSize() uint32 {
	if x != nil {
		return x.PopulationSize
	}
	return 0
}

func (x *TableRequest) GetSampleSize() uint32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *TableRequest) GetSensitiveColumns() []*Column {
	if x != nil {
		return x.SensitiveColumns
	}
	return nil
}

func (x *TableRequest) GetColumns() []*Column {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type Column struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *Column) Reset() {
	*x = Column{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Column) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Column) ProtoMessage() {}

func (x *Column) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Column.ProtoReflect.Descriptor instead.
func (*Column) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{2}
}

func (x *Column) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Column) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TableProfilingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RowSamples          []*Row           `protobuf:"bytes,2,rep,name=rowSamples,proto3" json:"rowSamples,omitempty"`
	NumberOfRowsSampled uint32           `protobuf:"varint,3,opt,name=numberOfRowsSampled,proto3" json:"numberOfRowsSampled,omitempty"`
	SecondsTaken        uint32           `protobuf:"varint,4,opt,name=secondsTaken,proto3" json:"secondsTaken,omitempty"`
	HasMore             bool             `protobuf:"varint,5,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	ColumnSummaries     []*ColumnSummary `protobuf:"bytes,6,rep,name=columnSummaries,proto3" json:"columnSummaries,omitempty"`
}

func (x *TableProfilingResponse) Reset() {
	*x = TableProfilingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableProfilingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableProfilingResponse) ProtoMessage() {}

func (x *TableProfilingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableProfilingResponse.ProtoReflect.Descriptor instead.
func (*TableProfilingResponse) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{3}
}

func (x *TableProfilingResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TableProfilingResponse) GetRowSamples() []*Row {
	if x != nil {
		return x.RowSamples
	}
	return nil
}

func (x *TableProfilingResponse) GetNumberOfRowsSampled() uint32 {
	if x != nil {
		return x.NumberOfRowsSampled
	}
	return 0
}

func (x *TableProfilingResponse) GetSecondsTaken() uint32 {
	if x != nil {
		return x.SecondsTaken
	}
	return 0
}

func (x *TableProfilingResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *TableProfilingResponse) GetColumnSummaries() []*ColumnSummary {
	if x != nil {
		return x.ColumnSummaries
	}
	return nil
}

type Row struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Row) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Row) ProtoMessage() {}

func (x *Row) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Row.ProtoReflect.Descriptor instead.
func (*Row) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{4}
}

func (x *Row) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ColumnSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Distribution         []*ColumnDistribution `protobuf:"bytes,1,rep,name=distribution,proto3" json:"distribution,omitempty"`
	NumberOfNulls        uint32                `protobuf:"varint,2,opt,name=numberOfNulls,proto3" json:"numberOfNulls,omitempty"`
	NumberOfUniqueValues uint32                `protobuf:"varint,3,opt,name=numberOfUniqueValues,proto3" json:"numberOfUniqueValues,omitempty"`
	NumberOfAllValues    uint32                `protobuf:"varint,4,opt,name=numberOfAllValues,proto3" json:"numberOfAllValues,omitempty"`
	Column               *Column               `protobuf:"bytes,5,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *ColumnSummary) Reset() {
	*x = ColumnSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnSummary) ProtoMessage() {}

func (x *ColumnSummary) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnSummary.ProtoReflect.Descriptor instead.
func (*ColumnSummary) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{5}
}

func (x *ColumnSummary) GetDistribution() []*ColumnDistribution {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *ColumnSummary) GetNumberOfNulls() uint32 {
	if x != nil {
		return x.NumberOfNulls
	}
	return 0
}

func (x *ColumnSummary) GetNumberOfUniqueValues() uint32 {
	if x != nil {
		return x.NumberOfUniqueValues
	}
	return 0
}

func (x *ColumnSummary) GetNumberOfAllValues() uint32 {
	if x != nil {
		return x.NumberOfAllValues
	}
	return 0
}

func (x *ColumnSummary) GetColumn() *Column {
	if x != nil {
		return x.Column
	}
	return nil
}

type ColumnDistribution struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Count uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ColumnDistribution) Reset() {
	*x = ColumnDistribution{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnDistribution) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnDistribution) ProtoMessage() {}

func (x *ColumnDistribution) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnDistribution.ProtoReflect.Descriptor instead.
func (*ColumnDistribution) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{6}
}

func (x *ColumnDistribution) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ColumnDistribution) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// If enabled by your connector, a datasource admin
// is presented with the opportunity to construct
// custom table profiling queries.
//
// The request for a call to custom table profiling
// looks identical to that of a normal table profiling
// request. However, an addition (optional) field is
// present - the custom query in question.
type CustomTableProfilingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *common.ProtobufConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	TableRequests []*CustomTableRequest         `protobuf:"bytes,2,rep,name=tableRequests,proto3" json:"tableRequests,omitempty"`
	Auth          *auth.Auth                    `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CustomTableProfilingRequest) Reset() {
	*x = CustomTableProfilingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTableProfilingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTableProfilingRequest) ProtoMessage() {}

func (x *CustomTableProfilingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTableProfilingRequest.ProtoReflect.Descriptor instead.
func (*CustomTableProfilingRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{7}
}

func (x *CustomTableProfilingRequest) GetConfiguration() *common.ProtobufConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *CustomTableProfilingRequest) GetTableRequests() []*CustomTableRequest {
	if x != nil {
		return x.TableRequests
	}
	return nil
}

func (x *CustomTableProfilingRequest) GetAuth() *auth.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

// A CustomTableRequest is a normal TableRequest
// but with the additional override
// query string.
//
// Implementing connectors MUST execute the provided
// query override as-is and without any modification.
type CustomTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  *TableRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Override string        `protobuf:"bytes,2,opt,name=override,proto3" json:"override,omitempty"`
}

func (x *CustomTableRequest) Reset() {
	*x = CustomTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTableRequest) ProtoMessage() {}

func (x *CustomTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTableRequest.ProtoReflect.Descriptor instead.
func (*CustomTableRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{8}
}

func (x *CustomTableRequest) GetRequest() *TableRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CustomTableRequest) GetOverride() string {
	if x != nil {
		return x.Override
	}
	return ""
}

// A CustomTableProfilingResponse is the same as a
// normal TableProfilingReponse, but with the additional
// schema array.
//
// The schema array describes to Alation the projection that
// the datasource admin used in their custom query. That is,
// given the following query...
//
// SELECT id, name, age, department FROM Person
//
// ...Alation needs to be informed that the profile was done
// over the three columns (id, name, age).
//
// All columns within the schema MUST originate from the target
// table in question. For example...
//
// SELECT p.name, e.department
// FROM Person AS p JOIN Employee AS e ON p.id = e.person
//
// ...contains a field in its projection that is NOT a member
// of the Person table that we are profiling. In this scenario,
// implementing Connectors MUST return an error to Alation.
//
// As is in normal table profiling, connectors MUST still make
// a best effort is censoring columns that have been marked
// as sensitive (see TableRequest.sensitiveColumns).
type CustomTableProfilingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response *TableProfilingResponse `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	Schema   []*Column               `protobuf:"bytes,2,rep,name=schema,proto3" json:"schema,omitempty"`
}

func (x *CustomTableProfilingResponse) Reset() {
	*x = CustomTableProfilingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTableProfilingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTableProfilingResponse) ProtoMessage() {}

func (x *CustomTableProfilingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTableProfilingResponse.ProtoReflect.Descriptor instead.
func (*CustomTableProfilingResponse) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{9}
}

func (x *CustomTableProfilingResponse) GetResponse() *TableProfilingResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *CustomTableProfilingResponse) GetSchema() []*Column {
	if x != nil {
		return x.Schema
	}
	return nil
}

type ColumnProfilingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *common.ProtobufConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Request       *ColumnRequest                `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Auth          *auth.Auth                    `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *ColumnProfilingRequest) Reset() {
	*x = ColumnProfilingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnProfilingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProfilingRequest) ProtoMessage() {}

func (x *ColumnProfilingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProfilingRequest.ProtoReflect.Descriptor instead.
func (*ColumnProfilingRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{10}
}

func (x *ColumnProfilingRequest) GetConfiguration() *common.ProtobufConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *ColumnProfilingRequest) GetRequest() *ColumnRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *ColumnProfilingRequest) GetAuth() *auth.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type ColumnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema     string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table      string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Column     string `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	SampleSize uint32 `protobuf:"varint,4,opt,name=sampleSize,proto3" json:"sampleSize,omitempty"`
	// The timeout for a given sampling query (in seconds).
	Timeout uint32                                `protobuf:"varint,5,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Type    mde_objects.ColumnType_NormalizedType `protobuf:"varint,6,opt,name=type,proto3,enum=rdbms.mde_objects.ColumnType_NormalizedType" json:"type,omitempty"`
}

func (x *ColumnRequest) Reset() {
	*x = ColumnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnRequest) ProtoMessage() {}

func (x *ColumnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnRequest.ProtoReflect.Descriptor instead.
func (*ColumnRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{11}
}

func (x *ColumnRequest) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ColumnRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ColumnRequest) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *ColumnRequest) GetSampleSize() uint32 {
	if x != nil {
		return x.SampleSize
	}
	return 0
}

func (x *ColumnRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ColumnRequest) GetType() mde_objects.ColumnType_NormalizedType {
	if x != nil {
		return x.Type
	}
	return mde_objects.ColumnType_NormalizedType(0)
}

type ColumnProfilingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//	*ColumnProfilingResponse_Distribution
	//	*ColumnProfilingResponse_Final
	Response isColumnProfilingResponse_Response `protobuf_oneof:"response"`
}

func (x *ColumnProfilingResponse) Reset() {
	*x = ColumnProfilingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnProfilingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProfilingResponse) ProtoMessage() {}

func (x *ColumnProfilingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProfilingResponse.ProtoReflect.Descriptor instead.
func (*ColumnProfilingResponse) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{12}
}

func (m *ColumnProfilingResponse) GetResponse() isColumnProfilingResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ColumnProfilingResponse) GetDistribution() *ColumnDistribution {
	if x, ok := x.GetResponse().(*ColumnProfilingResponse_Distribution); ok {
		return x.Distribution
	}
	return nil
}

func (x *ColumnProfilingResponse) GetFinal() *ColumnProfilingFinalResponse {
	if x, ok := x.GetResponse().(*ColumnProfilingResponse_Final); ok {
		return x.Final
	}
	return nil
}

type isColumnProfilingResponse_Response interface {
	isColumnProfilingResponse_Response()
}

type ColumnProfilingResponse_Distribution struct {
	Distribution *ColumnDistribution `protobuf:"bytes,1,opt,name=distribution,proto3,oneof"`
}

type ColumnProfilingResponse_Final struct {
	Final *ColumnProfilingFinalResponse `protobuf:"bytes,3,opt,name=final,proto3,oneof"`
}

func (*ColumnProfilingResponse_Distribution) isColumnProfilingResponse_Response() {}

func (*ColumnProfilingResponse_Final) isColumnProfilingResponse_Response() {}

type ColumnProfilingFinalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics   []*Statistic `protobuf:"bytes,2,rep,name=statistics,proto3" json:"statistics,omitempty"`
	HasMore      bool         `protobuf:"varint,3,opt,name=hasMore,proto3" json:"hasMore,omitempty"`
	SecondsTaken uint32       `protobuf:"varint,5,opt,name=secondsTaken,proto3" json:"secondsTaken,omitempty"`
}

func (x *ColumnProfilingFinalResponse) Reset() {
	*x = ColumnProfilingFinalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnProfilingFinalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnProfilingFinalResponse) ProtoMessage() {}

func (x *ColumnProfilingFinalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnProfilingFinalResponse.ProtoReflect.Descriptor instead.
func (*ColumnProfilingFinalResponse) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{13}
}

func (x *ColumnProfilingFinalResponse) GetStatistics() []*Statistic {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *ColumnProfilingFinalResponse) GetHasMore() bool {
	if x != nil {
		return x.HasMore
	}
	return false
}

func (x *ColumnProfilingFinalResponse) GetSecondsTaken() uint32 {
	if x != nil {
		return x.SecondsTaken
	}
	return 0
}

type Statistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Statistic) Reset() {
	*x = Statistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistic) ProtoMessage() {}

func (x *Statistic) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistic.ProtoReflect.Descriptor instead.
func (*Statistic) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{14}
}

func (x *Statistic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Statistic) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// If enabled by your connector, a datasource admin
// is presented with the opportunity to construct
// custom column statistics queries.
//
// The request for a call to custom column profiling
// looks identical to that of a normal column profiling
// request. However, an addition field is present - the
// custom query in question. This custom query can either
// be a raw SQL string which MUST be executed as is, or
// it can be a templated string which must first undergo
// string interpolation before being submitted to the
// target database.
type CustomColumnProfilingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *common.ProtobufConfiguration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Request       *ColumnRequest                `protobuf:"bytes,2,opt,name=request,proto3" json:"request,omitempty"`
	Override      *ColumnStatisticsOverride     `protobuf:"bytes,3,opt,name=override,proto3" json:"override,omitempty"`
	Auth          *auth.Auth                    `protobuf:"bytes,4,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *CustomColumnProfilingRequest) Reset() {
	*x = CustomColumnProfilingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomColumnProfilingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomColumnProfilingRequest) ProtoMessage() {}

func (x *CustomColumnProfilingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomColumnProfilingRequest.ProtoReflect.Descriptor instead.
func (*CustomColumnProfilingRequest) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{15}
}

func (x *CustomColumnProfilingRequest) GetConfiguration() *common.ProtobufConfiguration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *CustomColumnProfilingRequest) GetRequest() *ColumnRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *CustomColumnProfilingRequest) GetOverride() *ColumnStatisticsOverride {
	if x != nil {
		return x.Override
	}
	return nil
}

func (x *CustomColumnProfilingRequest) GetAuth() *auth.Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

// An admin may override the query to use for gathering
// statistics on a particular column. This custom query
// can come in two flavors - literal and templated.
//
// A literal query is a raw query entered in by the admin
// which is fully formed and is targeted specifically to
// the column in question. It MUST be executed as-is and
// not modified at all.
//
// A templated query is a global template configured by
// the datasource admin. Much like how you, the connector
// developer, can write your own templated queries on
// how to gather statistics for a given column so can
// a datasource admin.
//
// Literal queries are more specific and thus take precedence.
// This precedence will be determined by Alation, which will
// populate this message accordingly.
type ColumnStatisticsOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*ColumnStatisticsOverride_Literal
	//	*ColumnStatisticsOverride_Templated
	Query isColumnStatisticsOverride_Query `protobuf_oneof:"query"`
}

func (x *ColumnStatisticsOverride) Reset() {
	*x = ColumnStatisticsOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnStatisticsOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnStatisticsOverride) ProtoMessage() {}

func (x *ColumnStatisticsOverride) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnStatisticsOverride.ProtoReflect.Descriptor instead.
func (*ColumnStatisticsOverride) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{16}
}

func (m *ColumnStatisticsOverride) GetQuery() isColumnStatisticsOverride_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *ColumnStatisticsOverride) GetLiteral() string {
	if x, ok := x.GetQuery().(*ColumnStatisticsOverride_Literal); ok {
		return x.Literal
	}
	return ""
}

func (x *ColumnStatisticsOverride) GetTemplated() *TemplatedColumnStatisticsOverride {
	if x, ok := x.GetQuery().(*ColumnStatisticsOverride_Templated); ok {
		return x.Templated
	}
	return nil
}

type isColumnStatisticsOverride_Query interface {
	isColumnStatisticsOverride_Query()
}

type ColumnStatisticsOverride_Literal struct {
	Literal string `protobuf:"bytes,1,opt,name=literal,proto3,oneof"`
}

type ColumnStatisticsOverride_Templated struct {
	Templated *TemplatedColumnStatisticsOverride `protobuf:"bytes,2,opt,name=templated,proto3,oneof"`
}

func (*ColumnStatisticsOverride_Literal) isColumnStatisticsOverride_Query() {}

func (*ColumnStatisticsOverride_Templated) isColumnStatisticsOverride_Query() {}

// A TemplatedColumnStatisticsOverride contains the numeric statistics
// template, the non-numeric statistics template, and
// the formatting directives used in the aforementioned
// templates.
//
// The placeholders are strings that will never be null.
// They contain the formatting directives used by the datasource
// admin to create their query. For example:
//
//    SELECT MIN({{column}}) AS Minimum FROM {{table}} WHERE rownum <= {{limit}}
//
// ...where columnPlaceholder is "{{column}}", tablePlacholder
// is "{{table}}", and limitPlaceholder is "{{limit}}".
//
// The above is an example ONLY. Connectors MUST NOT assume
// that these placeholders will remain constant or be version
// controlled in anyway.
//
// Connectors MUST do a find and replace of these placeholder
// strings with their actual values. Connectors SHOULD sanitize
// any inputs that require it (most notably, the limit field will
// likely require sanitization across most databases).
//
// Connectors MUST determine the data type of the column in question
// and dispatch to the appropriate query (numeric or non-numeric).
//
// numericTemplate and nonNumericTemplate are both nullable.
// If the data type for a given column is, for example, numeric
// and the numericTemplate field is null, then connectors
// SHOULD fall back to using their default implementation for
// numeric columns.
type TemplatedColumnStatisticsOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumericTemplate    string `protobuf:"bytes,1,opt,name=numericTemplate,proto3" json:"numericTemplate,omitempty"`
	NonNumericTemplate string `protobuf:"bytes,2,opt,name=nonNumericTemplate,proto3" json:"nonNumericTemplate,omitempty"`
	ColumnPlaceholder  string `protobuf:"bytes,3,opt,name=columnPlaceholder,proto3" json:"columnPlaceholder,omitempty"`
	TablePlaceholder   string `protobuf:"bytes,4,opt,name=tablePlaceholder,proto3" json:"tablePlaceholder,omitempty"`
	LimitPlaceholder   string `protobuf:"bytes,5,opt,name=limitPlaceholder,proto3" json:"limitPlaceholder,omitempty"`
}

func (x *TemplatedColumnStatisticsOverride) Reset() {
	*x = TemplatedColumnStatisticsOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profiling_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplatedColumnStatisticsOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplatedColumnStatisticsOverride) ProtoMessage() {}

func (x *TemplatedColumnStatisticsOverride) ProtoReflect() protoreflect.Message {
	mi := &file_profiling_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplatedColumnStatisticsOverride.ProtoReflect.Descriptor instead.
func (*TemplatedColumnStatisticsOverride) Descriptor() ([]byte, []int) {
	return file_profiling_proto_rawDescGZIP(), []int{17}
}

func (x *TemplatedColumnStatisticsOverride) GetNumericTemplate() string {
	if x != nil {
		return x.NumericTemplate
	}
	return ""
}

func (x *TemplatedColumnStatisticsOverride) GetNonNumericTemplate() string {
	if x != nil {
		return x.NonNumericTemplate
	}
	return ""
}

func (x *TemplatedColumnStatisticsOverride) GetColumnPlaceholder() string {
	if x != nil {
		return x.ColumnPlaceholder
	}
	return ""
}

func (x *TemplatedColumnStatisticsOverride) GetTablePlaceholder() string {
	if x != nil {
		return x.TablePlaceholder
	}
	return ""
}

func (x *TemplatedColumnStatisticsOverride) GetLimitPlaceholder() string {
	if x != nil {
		return x.LimitPlaceholder
	}
	return ""
}

var File_profiling_proto protoreflect.FileDescriptor

var file_profiling_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x1a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6d, 0x64,
	0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcd, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x64,
	0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22,
	0xa4, 0x02, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x26, 0x0a, 0x0e,
	0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x2c, 0x0a, 0x06, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x98, 0x02, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f,
	0x66, 0x52, 0x6f, 0x77, 0x73, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x52, 0x6f, 0x77, 0x73,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x68,
	0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61,
	0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x0f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0f,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22,
	0x1d, 0x0a, 0x03, 0x52, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x91,
	0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x47, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x69, 0x73,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x41, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x2f, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x22, 0x40, 0x0a, 0x12, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x1b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x64,
	0x62, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x75,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68,
	0x22, 0x69, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x1c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x22, 0xc3, 0x01, 0x0a, 0x16, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x64, 0x62, 0x6d,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73,
	0x2e, 0x6d, 0x64, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb7, 0x01, 0x0a,
	0x17, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x64,
	0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x4d, 0x6f, 0x72, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x61, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x54, 0x61, 0x6b, 0x65,
	0x6e, 0x22, 0x35, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x02, 0x0a, 0x1c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x08, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x08, 0x6f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x93, 0x01, 0x0a, 0x18,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x6c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x12, 0x52, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x48, 0x00, 0x52, 0x09, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x83, 0x02, 0x0a, 0x21, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6e,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x42, 0x4a, 0x0a, 0x1a, 0x61, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x64, 0x6b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x42, 0x09, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x69, 0x6e, 0x67,
	0x50, 0x01, 0x5a, 0x1f, 0x61, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6f, 0x63, 0x66, 0x2f, 0x72, 0x64, 0x62, 0x6d, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_profiling_proto_rawDescOnce sync.Once
	file_profiling_proto_rawDescData = file_profiling_proto_rawDesc
)

func file_profiling_proto_rawDescGZIP() []byte {
	file_profiling_proto_rawDescOnce.Do(func() {
		file_profiling_proto_rawDescData = protoimpl.X.CompressGZIP(file_profiling_proto_rawDescData)
	})
	return file_profiling_proto_rawDescData
}

var file_profiling_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_profiling_proto_goTypes = []interface{}{
	(*TableProfilingRequest)(nil),              // 0: rdbms.profiling.TableProfilingRequest
	(*TableRequest)(nil),                       // 1: rdbms.profiling.TableRequest
	(*Column)(nil),                             // 2: rdbms.profiling.Column
	(*TableProfilingResponse)(nil),             // 3: rdbms.profiling.TableProfilingResponse
	(*Row)(nil),                                // 4: rdbms.profiling.Row
	(*ColumnSummary)(nil),                      // 5: rdbms.profiling.ColumnSummary
	(*ColumnDistribution)(nil),                 // 6: rdbms.profiling.ColumnDistribution
	(*CustomTableProfilingRequest)(nil),        // 7: rdbms.profiling.CustomTableProfilingRequest
	(*CustomTableRequest)(nil),                 // 8: rdbms.profiling.CustomTableRequest
	(*CustomTableProfilingResponse)(nil),       // 9: rdbms.profiling.CustomTableProfilingResponse
	(*ColumnProfilingRequest)(nil),             // 10: rdbms.profiling.ColumnProfilingRequest
	(*ColumnRequest)(nil),                      // 11: rdbms.profiling.ColumnRequest
	(*ColumnProfilingResponse)(nil),            // 12: rdbms.profiling.ColumnProfilingResponse
	(*ColumnProfilingFinalResponse)(nil),       // 13: rdbms.profiling.ColumnProfilingFinalResponse
	(*Statistic)(nil),                          // 14: rdbms.profiling.Statistic
	(*CustomColumnProfilingRequest)(nil),       // 15: rdbms.profiling.CustomColumnProfilingRequest
	(*ColumnStatisticsOverride)(nil),           // 16: rdbms.profiling.ColumnStatisticsOverride
	(*TemplatedColumnStatisticsOverride)(nil),  // 17: rdbms.profiling.TemplatedColumnStatisticsOverride
	(*common.ProtobufConfiguration)(nil),       // 18: rdbms.common.ProtobufConfiguration
	(*auth.Auth)(nil),                          // 19: rdbms.auth.Auth
	(mde_objects.ColumnType_NormalizedType)(0), // 20: rdbms.mde_objects.ColumnType.NormalizedType
}
var file_profiling_proto_depIdxs = []int32{
	18, // 0: rdbms.profiling.TableProfilingRequest.configuration:type_name -> rdbms.common.ProtobufConfiguration
	1,  // 1: rdbms.profiling.TableProfilingRequest.tableRequests:type_name -> rdbms.profiling.TableRequest
	19, // 2: rdbms.profiling.TableProfilingRequest.auth:type_name -> rdbms.auth.Auth
	2,  // 3: rdbms.profiling.TableRequest.sensitiveColumns:type_name -> rdbms.profiling.Column
	2,  // 4: rdbms.profiling.TableRequest.columns:type_name -> rdbms.profiling.Column
	4,  // 5: rdbms.profiling.TableProfilingResponse.rowSamples:type_name -> rdbms.profiling.Row
	5,  // 6: rdbms.profiling.TableProfilingResponse.columnSummaries:type_name -> rdbms.profiling.ColumnSummary
	6,  // 7: rdbms.profiling.ColumnSummary.distribution:type_name -> rdbms.profiling.ColumnDistribution
	2,  // 8: rdbms.profiling.ColumnSummary.column:type_name -> rdbms.profiling.Column
	18, // 9: rdbms.profiling.CustomTableProfilingRequest.configuration:type_name -> rdbms.common.ProtobufConfiguration
	8,  // 10: rdbms.profiling.CustomTableProfilingRequest.tableRequests:type_name -> rdbms.profiling.CustomTableRequest
	19, // 11: rdbms.profiling.CustomTableProfilingRequest.auth:type_name -> rdbms.auth.Auth
	1,  // 12: rdbms.profiling.CustomTableRequest.request:type_name -> rdbms.profiling.TableRequest
	3,  // 13: rdbms.profiling.CustomTableProfilingResponse.response:type_name -> rdbms.profiling.TableProfilingResponse
	2,  // 14: rdbms.profiling.CustomTableProfilingResponse.schema:type_name -> rdbms.profiling.Column
	18, // 15: rdbms.profiling.ColumnProfilingRequest.configuration:type_name -> rdbms.common.ProtobufConfiguration
	11, // 16: rdbms.profiling.ColumnProfilingRequest.request:type_name -> rdbms.profiling.ColumnRequest
	19, // 17: rdbms.profiling.ColumnProfilingRequest.auth:type_name -> rdbms.auth.Auth
	20, // 18: rdbms.profiling.ColumnRequest.type:type_name -> rdbms.mde_objects.ColumnType.NormalizedType
	6,  // 19: rdbms.profiling.ColumnProfilingResponse.distribution:type_name -> rdbms.profiling.ColumnDistribution
	13, // 20: rdbms.profiling.ColumnProfilingResponse.final:type_name -> rdbms.profiling.ColumnProfilingFinalResponse
	14, // 21: rdbms.profiling.ColumnProfilingFinalResponse.statistics:type_name -> rdbms.profiling.Statistic
	18, // 22: rdbms.profiling.CustomColumnProfilingRequest.configuration:type_name -> rdbms.common.ProtobufConfiguration
	11, // 23: rdbms.profiling.CustomColumnProfilingRequest.request:type_name -> rdbms.profiling.ColumnRequest
	16, // 24: rdbms.profiling.CustomColumnProfilingRequest.override:type_name -> rdbms.profiling.ColumnStatisticsOverride
	19, // 25: rdbms.profiling.CustomColumnProfilingRequest.auth:type_name -> rdbms.auth.Auth
	17, // 26: rdbms.profiling.ColumnStatisticsOverride.templated:type_name -> rdbms.profiling.TemplatedColumnStatisticsOverride
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_profiling_proto_init() }
func file_profiling_proto_init() {
	if File_profiling_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_profiling_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableProfilingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Column); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableProfilingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Row); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnDistribution); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTableProfilingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTableProfilingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnProfilingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnProfilingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnProfilingFinalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomColumnProfilingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnStatisticsOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profiling_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplatedColumnStatisticsOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_profiling_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ColumnProfilingResponse_Distribution)(nil),
		(*ColumnProfilingResponse_Final)(nil),
	}
	file_profiling_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ColumnStatisticsOverride_Literal)(nil),
		(*ColumnStatisticsOverride_Templated)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profiling_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_profiling_proto_goTypes,
		DependencyIndexes: file_profiling_proto_depIdxs,
		MessageInfos:      file_profiling_proto_msgTypes,
	}.Build()
	File_profiling_proto = out.File
	file_profiling_proto_rawDesc = nil
	file_profiling_proto_goTypes = nil
	file_profiling_proto_depIdxs = nil
}
