// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GbmClient is the client API for Gbm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GbmClient interface {
	// Verify that the connector has been configured correctly.
	VerifyConfiguration(ctx context.Context, in *VerifyConfigurationRequest, opts ...grpc.CallOption) (*BIObjectResponse, error)
	// Return the BI Server folder structure.
	ListFileSystem(ctx context.Context, in *ListFileSystemRequest, opts ...grpc.CallOption) (Gbm_ListFileSystemClient, error)
	// Run full metadata extraction.
	RunFullExtraction(ctx context.Context, in *RunFullExtractionRequest, opts ...grpc.CallOption) (Gbm_RunFullExtractionClient, error)
	// Certify or de-certify a BI object.
	PropagateCertification(ctx context.Context, in *PropagateCertificationRequest, opts ...grpc.CallOption) (Gbm_PropagateCertificationClient, error)
}

type gbmClient struct {
	cc grpc.ClientConnInterface
}

func NewGbmClient(cc grpc.ClientConnInterface) GbmClient {
	return &gbmClient{cc}
}

func (c *gbmClient) VerifyConfiguration(ctx context.Context, in *VerifyConfigurationRequest, opts ...grpc.CallOption) (*BIObjectResponse, error) {
	out := new(BIObjectResponse)
	err := c.cc.Invoke(ctx, "/gbm.Gbm/VerifyConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gbmClient) ListFileSystem(ctx context.Context, in *ListFileSystemRequest, opts ...grpc.CallOption) (Gbm_ListFileSystemClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gbm_ServiceDesc.Streams[0], "/gbm.Gbm/ListFileSystem", opts...)
	if err != nil {
		return nil, err
	}
	x := &gbmListFileSystemClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gbm_ListFileSystemClient interface {
	Recv() (*BIObjectResponse, error)
	grpc.ClientStream
}

type gbmListFileSystemClient struct {
	grpc.ClientStream
}

func (x *gbmListFileSystemClient) Recv() (*BIObjectResponse, error) {
	m := new(BIObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gbmClient) RunFullExtraction(ctx context.Context, in *RunFullExtractionRequest, opts ...grpc.CallOption) (Gbm_RunFullExtractionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gbm_ServiceDesc.Streams[1], "/gbm.Gbm/RunFullExtraction", opts...)
	if err != nil {
		return nil, err
	}
	x := &gbmRunFullExtractionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gbm_RunFullExtractionClient interface {
	Recv() (*BIObjectResponse, error)
	grpc.ClientStream
}

type gbmRunFullExtractionClient struct {
	grpc.ClientStream
}

func (x *gbmRunFullExtractionClient) Recv() (*BIObjectResponse, error) {
	m := new(BIObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gbmClient) PropagateCertification(ctx context.Context, in *PropagateCertificationRequest, opts ...grpc.CallOption) (Gbm_PropagateCertificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gbm_ServiceDesc.Streams[2], "/gbm.Gbm/propagateCertification", opts...)
	if err != nil {
		return nil, err
	}
	x := &gbmPropagateCertificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gbm_PropagateCertificationClient interface {
	Recv() (*BIObjectResponse, error)
	grpc.ClientStream
}

type gbmPropagateCertificationClient struct {
	grpc.ClientStream
}

func (x *gbmPropagateCertificationClient) Recv() (*BIObjectResponse, error) {
	m := new(BIObjectResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GbmServer is the server API for Gbm service.
// All implementations must embed UnimplementedGbmServer
// for forward compatibility
type GbmServer interface {
	// Verify that the connector has been configured correctly.
	VerifyConfiguration(context.Context, *VerifyConfigurationRequest) (*BIObjectResponse, error)
	// Return the BI Server folder structure.
	ListFileSystem(*ListFileSystemRequest, Gbm_ListFileSystemServer) error
	// Run full metadata extraction.
	RunFullExtraction(*RunFullExtractionRequest, Gbm_RunFullExtractionServer) error
	// Certify or de-certify a BI object.
	PropagateCertification(*PropagateCertificationRequest, Gbm_PropagateCertificationServer) error
	mustEmbedUnimplementedGbmServer()
}

// UnimplementedGbmServer must be embedded to have forward compatible implementations.
type UnimplementedGbmServer struct {
}

func (UnimplementedGbmServer) VerifyConfiguration(context.Context, *VerifyConfigurationRequest) (*BIObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyConfiguration not implemented")
}
func (UnimplementedGbmServer) ListFileSystem(*ListFileSystemRequest, Gbm_ListFileSystemServer) error {
	return status.Errorf(codes.Unimplemented, "method ListFileSystem not implemented")
}
func (UnimplementedGbmServer) RunFullExtraction(*RunFullExtractionRequest, Gbm_RunFullExtractionServer) error {
	return status.Errorf(codes.Unimplemented, "method RunFullExtraction not implemented")
}
func (UnimplementedGbmServer) PropagateCertification(*PropagateCertificationRequest, Gbm_PropagateCertificationServer) error {
	return status.Errorf(codes.Unimplemented, "method PropagateCertification not implemented")
}
func (UnimplementedGbmServer) mustEmbedUnimplementedGbmServer() {}

// UnsafeGbmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GbmServer will
// result in compilation errors.
type UnsafeGbmServer interface {
	mustEmbedUnimplementedGbmServer()
}

func RegisterGbmServer(s grpc.ServiceRegistrar, srv GbmServer) {
	s.RegisterService(&Gbm_ServiceDesc, srv)
}

func _Gbm_VerifyConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GbmServer).VerifyConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gbm.Gbm/VerifyConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GbmServer).VerifyConfiguration(ctx, req.(*VerifyConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gbm_ListFileSystem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListFileSystemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GbmServer).ListFileSystem(m, &gbmListFileSystemServer{stream})
}

type Gbm_ListFileSystemServer interface {
	Send(*BIObjectResponse) error
	grpc.ServerStream
}

type gbmListFileSystemServer struct {
	grpc.ServerStream
}

func (x *gbmListFileSystemServer) Send(m *BIObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gbm_RunFullExtraction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunFullExtractionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GbmServer).RunFullExtraction(m, &gbmRunFullExtractionServer{stream})
}

type Gbm_RunFullExtractionServer interface {
	Send(*BIObjectResponse) error
	grpc.ServerStream
}

type gbmRunFullExtractionServer struct {
	grpc.ServerStream
}

func (x *gbmRunFullExtractionServer) Send(m *BIObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Gbm_PropagateCertification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PropagateCertificationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GbmServer).PropagateCertification(m, &gbmPropagateCertificationServer{stream})
}

type Gbm_PropagateCertificationServer interface {
	Send(*BIObjectResponse) error
	grpc.ServerStream
}

type gbmPropagateCertificationServer struct {
	grpc.ServerStream
}

func (x *gbmPropagateCertificationServer) Send(m *BIObjectResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Gbm_ServiceDesc is the grpc.ServiceDesc for Gbm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gbm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gbm.Gbm",
	HandlerType: (*GbmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyConfiguration",
			Handler:    _Gbm_VerifyConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListFileSystem",
			Handler:       _Gbm_ListFileSystem_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RunFullExtraction",
			Handler:       _Gbm_RunFullExtraction_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "propagateCertification",
			Handler:       _Gbm_PropagateCertification_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "generic_bi_metadata_extraction.proto",
}
