// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tennis.proto

package main

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Complex_Corpus int32

const (
	Complex_UNIVERSAL Complex_Corpus = 0
	Complex_WEB       Complex_Corpus = 1
	Complex_IMAGES    Complex_Corpus = 2
	Complex_LOCAL     Complex_Corpus = 3
	Complex_NEWS      Complex_Corpus = 4
	Complex_PRODUCTS  Complex_Corpus = 5
	Complex_VIDEO     Complex_Corpus = 6
)

var Complex_Corpus_name = map[int32]string{
	0: "UNIVERSAL",
	1: "WEB",
	2: "IMAGES",
	3: "LOCAL",
	4: "NEWS",
	5: "PRODUCTS",
	6: "VIDEO",
}

var Complex_Corpus_value = map[string]int32{
	"UNIVERSAL": 0,
	"WEB":       1,
	"IMAGES":    2,
	"LOCAL":     3,
	"NEWS":      4,
	"PRODUCTS":  5,
	"VIDEO":     6,
}

func (x Complex_Corpus) String() string {
	return proto.EnumName(Complex_Corpus_name, int32(x))
}

func (Complex_Corpus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_851ab2ac2a109607, []int{1, 0}
}

type Ball struct {
	Ball                 string   `protobuf:"bytes,1,opt,name=ball,proto3" json:"ball,omitempty"`
	Complex              *Complex `protobuf:"bytes,2,opt,name=complex,proto3" json:"complex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ball) Reset()         { *m = Ball{} }
func (m *Ball) String() string { return proto.CompactTextString(m) }
func (*Ball) ProtoMessage()    {}
func (*Ball) Descriptor() ([]byte, []int) {
	return fileDescriptor_851ab2ac2a109607, []int{0}
}

func (m *Ball) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ball.Unmarshal(m, b)
}
func (m *Ball) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ball.Marshal(b, m, deterministic)
}
func (m *Ball) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ball.Merge(m, src)
}
func (m *Ball) XXX_Size() int {
	return xxx_messageInfo_Ball.Size(m)
}
func (m *Ball) XXX_DiscardUnknown() {
	xxx_messageInfo_Ball.DiscardUnknown(m)
}

var xxx_messageInfo_Ball proto.InternalMessageInfo

func (m *Ball) GetBall() string {
	if m != nil {
		return m.Ball
	}
	return ""
}

func (m *Ball) GetComplex() *Complex {
	if m != nil {
		return m.Complex
	}
	return nil
}

type Complex struct {
	Array                []uint32        `protobuf:"varint,1,rep,packed,name=array,proto3" json:"array,omitempty"`
	Corpus               Complex_Corpus  `protobuf:"varint,4,opt,name=corpus,proto3,enum=main.Complex_Corpus" json:"corpus,omitempty"`
	Result               *Complex_Result `protobuf:"bytes,5,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Complex) Reset()         { *m = Complex{} }
func (m *Complex) String() string { return proto.CompactTextString(m) }
func (*Complex) ProtoMessage()    {}
func (*Complex) Descriptor() ([]byte, []int) {
	return fileDescriptor_851ab2ac2a109607, []int{1}
}

func (m *Complex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Complex.Unmarshal(m, b)
}
func (m *Complex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Complex.Marshal(b, m, deterministic)
}
func (m *Complex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Complex.Merge(m, src)
}
func (m *Complex) XXX_Size() int {
	return xxx_messageInfo_Complex.Size(m)
}
func (m *Complex) XXX_DiscardUnknown() {
	xxx_messageInfo_Complex.DiscardUnknown(m)
}

var xxx_messageInfo_Complex proto.InternalMessageInfo

func (m *Complex) GetArray() []uint32 {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Complex) GetCorpus() Complex_Corpus {
	if m != nil {
		return m.Corpus
	}
	return Complex_UNIVERSAL
}

func (m *Complex) GetResult() *Complex_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type Complex_Result struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Snippets             []string `protobuf:"bytes,3,rep,name=snippets,proto3" json:"snippets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Complex_Result) Reset()         { *m = Complex_Result{} }
func (m *Complex_Result) String() string { return proto.CompactTextString(m) }
func (*Complex_Result) ProtoMessage()    {}
func (*Complex_Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_851ab2ac2a109607, []int{1, 0}
}

func (m *Complex_Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Complex_Result.Unmarshal(m, b)
}
func (m *Complex_Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Complex_Result.Marshal(b, m, deterministic)
}
func (m *Complex_Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Complex_Result.Merge(m, src)
}
func (m *Complex_Result) XXX_Size() int {
	return xxx_messageInfo_Complex_Result.Size(m)
}
func (m *Complex_Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Complex_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Complex_Result proto.InternalMessageInfo

func (m *Complex_Result) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Complex_Result) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Complex_Result) GetSnippets() []string {
	if m != nil {
		return m.Snippets
	}
	return nil
}

type Incoming struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Incoming) Reset()         { *m = Incoming{} }
func (m *Incoming) String() string { return proto.CompactTextString(m) }
func (*Incoming) ProtoMessage()    {}
func (*Incoming) Descriptor() ([]byte, []int) {
	return fileDescriptor_851ab2ac2a109607, []int{2}
}

func (m *Incoming) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Incoming.Unmarshal(m, b)
}
func (m *Incoming) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Incoming.Marshal(b, m, deterministic)
}
func (m *Incoming) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Incoming.Merge(m, src)
}
func (m *Incoming) XXX_Size() int {
	return xxx_messageInfo_Incoming.Size(m)
}
func (m *Incoming) XXX_DiscardUnknown() {
	xxx_messageInfo_Incoming.DiscardUnknown(m)
}

var xxx_messageInfo_Incoming proto.InternalMessageInfo

func (m *Incoming) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Status struct {
	Fname                string   `protobuf:"bytes,1,opt,name=fname,proto3" json:"fname,omitempty"`
	Ok                   bool     `protobuf:"varint,2,opt,name=ok,proto3" json:"ok,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_851ab2ac2a109607, []int{3}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetFname() string {
	if m != nil {
		return m.Fname
	}
	return ""
}

func (m *Status) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Status) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterEnum("main.Complex_Corpus", Complex_Corpus_name, Complex_Corpus_value)
	proto.RegisterType((*Ball)(nil), "main.Ball")
	proto.RegisterType((*Complex)(nil), "main.Complex")
	proto.RegisterType((*Complex_Result)(nil), "main.Complex.Result")
	proto.RegisterType((*Incoming)(nil), "main.Incoming")
	proto.RegisterType((*Status)(nil), "main.Status")
}

func init() { proto.RegisterFile("tennis.proto", fileDescriptor_851ab2ac2a109607) }

var fileDescriptor_851ab2ac2a109607 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x6a, 0xdb, 0x40,
	0x14, 0x85, 0xad, 0xbf, 0xb1, 0x74, 0x6b, 0x1b, 0x71, 0xc9, 0x42, 0x78, 0x25, 0xd4, 0x42, 0xb4,
	0x28, 0xa2, 0xb8, 0xcb, 0xae, 0x6c, 0x59, 0x14, 0x83, 0x1b, 0x87, 0x51, 0x12, 0x43, 0x76, 0x13,
	0x77, 0x1a, 0x44, 0xf4, 0xc7, 0x68, 0x0c, 0xe9, 0x03, 0xf5, 0x3d, 0xcb, 0xcc, 0x58, 0xa5, 0x2d,
	0x64, 0x77, 0xcf, 0x3d, 0x9f, 0x34, 0xe7, 0x68, 0x04, 0x33, 0xc9, 0xdb, 0xb6, 0x1a, 0xb2, 0x5e,
	0x74, 0xb2, 0x43, 0xb7, 0x61, 0x55, 0x9b, 0xe4, 0xe0, 0x6e, 0x58, 0x5d, 0x23, 0x82, 0xfb, 0xc4,
	0xea, 0x3a, 0xb2, 0x62, 0x2b, 0x0d, 0xa8, 0x9e, 0xf1, 0x1a, 0xa6, 0xa7, 0xae, 0xe9, 0x6b, 0xfe,
	0x1a, 0xd9, 0xb1, 0x95, 0xbe, 0x5b, 0xcd, 0x33, 0xf5, 0x4c, 0x96, 0x9b, 0x25, 0x1d, 0xdd, 0xe4,
	0x97, 0x0d, 0xd3, 0xcb, 0x12, 0xaf, 0xc0, 0x63, 0x42, 0xb0, 0x9f, 0x91, 0x15, 0x3b, 0xe9, 0x9c,
	0x1a, 0x81, 0x1f, 0x81, 0x9c, 0x3a, 0xd1, 0x9f, 0x87, 0xc8, 0x8d, 0xad, 0x74, 0xb1, 0xba, 0xfa,
	0xe7, 0x4d, 0x59, 0xae, 0x3d, 0x7a, 0x61, 0x14, 0x2d, 0xf8, 0x70, 0xae, 0x65, 0xe4, 0xe9, 0x73,
	0xff, 0xa3, 0xa9, 0xf6, 0xe8, 0x85, 0x59, 0xee, 0x81, 0x98, 0x0d, 0x86, 0xe0, 0x9c, 0xc5, 0xd8,
	0x41, 0x8d, 0x2a, 0x8d, 0xac, 0x64, 0xcd, 0x75, 0x81, 0x80, 0x1a, 0x81, 0x4b, 0xf0, 0x87, 0xb6,
	0xea, 0x7b, 0x2e, 0x87, 0xc8, 0x89, 0x9d, 0x34, 0xa0, 0x7f, 0x74, 0xf2, 0x08, 0xc4, 0xa4, 0xc1,
	0x39, 0x04, 0xf7, 0x37, 0xbb, 0x87, 0x82, 0x96, 0xeb, 0x7d, 0x38, 0xc1, 0x29, 0x38, 0xc7, 0x62,
	0x13, 0x5a, 0x08, 0x40, 0x76, 0xdf, 0xd6, 0x5f, 0x8b, 0x32, 0xb4, 0x31, 0x00, 0x6f, 0x7f, 0xc8,
	0xd7, 0xfb, 0xd0, 0x41, 0x1f, 0xdc, 0x9b, 0xe2, 0x58, 0x86, 0x2e, 0xce, 0xc0, 0xbf, 0xa5, 0x87,
	0xed, 0x7d, 0x7e, 0x57, 0x86, 0x9e, 0x42, 0x1e, 0x76, 0xdb, 0xe2, 0x10, 0x92, 0xe4, 0x03, 0xf8,
	0xbb, 0xf6, 0xd4, 0x35, 0x55, 0xfb, 0x8c, 0x11, 0x4c, 0x1b, 0x3e, 0x0c, 0xec, 0x99, 0x5f, 0xf2,
	0x8e, 0x32, 0xd9, 0x02, 0x29, 0x25, 0x93, 0xe7, 0x41, 0xa5, 0xff, 0xd1, 0xb2, 0x66, 0x24, 0x8c,
	0xc0, 0x05, 0xd8, 0xdd, 0x8b, 0x2e, 0xe4, 0x53, 0xbb, 0x7b, 0x51, 0x14, 0x17, 0xa2, 0x13, 0x91,
	0x63, 0x28, 0x2d, 0x56, 0xaf, 0x40, 0xee, 0xf4, 0x75, 0x63, 0x0c, 0xee, 0xad, 0x3a, 0x11, 0xcc,
	0x57, 0x54, 0xd7, 0xbd, 0xfc, 0x6b, 0x4e, 0x26, 0xf8, 0x1e, 0x3c, 0xca, 0xfa, 0xea, 0xfb, 0xdb,
	0xc8, 0x27, 0x0b, 0xaf, 0xc1, 0x3b, 0x8a, 0x4a, 0x72, 0x5c, 0x18, 0x63, 0x6c, 0xb2, 0x9c, 0x19,
	0x6d, 0x32, 0x27, 0x93, 0x8d, 0xff, 0x48, 0xb2, 0x2f, 0x6a, 0xf5, 0x44, 0xf4, 0x9f, 0xf6, 0xf9,
	0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xd5, 0x09, 0x6c, 0x79, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TennisClient is the client API for Tennis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TennisClient interface {
	Ping(ctx context.Context, in *Ball, opts ...grpc.CallOption) (*Ball, error)
	Rapid(ctx context.Context, in *Ball, opts ...grpc.CallOption) (Tennis_RapidClient, error)
	Write(ctx context.Context, in *Incoming, opts ...grpc.CallOption) (*Status, error)
}

type tennisClient struct {
	cc *grpc.ClientConn
}

func NewTennisClient(cc *grpc.ClientConn) TennisClient {
	return &tennisClient{cc}
}

func (c *tennisClient) Ping(ctx context.Context, in *Ball, opts ...grpc.CallOption) (*Ball, error) {
	out := new(Ball)
	err := c.cc.Invoke(ctx, "/main.Tennis/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tennisClient) Rapid(ctx context.Context, in *Ball, opts ...grpc.CallOption) (Tennis_RapidClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tennis_serviceDesc.Streams[0], "/main.Tennis/Rapid", opts...)
	if err != nil {
		return nil, err
	}
	x := &tennisRapidClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tennis_RapidClient interface {
	Recv() (*Ball, error)
	grpc.ClientStream
}

type tennisRapidClient struct {
	grpc.ClientStream
}

func (x *tennisRapidClient) Recv() (*Ball, error) {
	m := new(Ball)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tennisClient) Write(ctx context.Context, in *Incoming, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/main.Tennis/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TennisServer is the server API for Tennis service.
type TennisServer interface {
	Ping(context.Context, *Ball) (*Ball, error)
	Rapid(*Ball, Tennis_RapidServer) error
	Write(context.Context, *Incoming) (*Status, error)
}

// UnimplementedTennisServer can be embedded to have forward compatible implementations.
type UnimplementedTennisServer struct {
}

func (*UnimplementedTennisServer) Ping(ctx context.Context, req *Ball) (*Ball, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedTennisServer) Rapid(req *Ball, srv Tennis_RapidServer) error {
	return status.Errorf(codes.Unimplemented, "method Rapid not implemented")
}
func (*UnimplementedTennisServer) Write(ctx context.Context, req *Incoming) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}

func RegisterTennisServer(s *grpc.Server, srv TennisServer) {
	s.RegisterService(&_Tennis_serviceDesc, srv)
}

func _Tennis_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ball)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TennisServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tennis/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TennisServer).Ping(ctx, req.(*Ball))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tennis_Rapid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ball)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TennisServer).Rapid(m, &tennisRapidServer{stream})
}

type Tennis_RapidServer interface {
	Send(*Ball) error
	grpc.ServerStream
}

type tennisRapidServer struct {
	grpc.ServerStream
}

func (x *tennisRapidServer) Send(m *Ball) error {
	return x.ServerStream.SendMsg(m)
}

func _Tennis_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Incoming)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TennisServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Tennis/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TennisServer).Write(ctx, req.(*Incoming))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tennis_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Tennis",
	HandlerType: (*TennisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Tennis_Ping_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Tennis_Write_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rapid",
			Handler:       _Tennis_Rapid_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tennis.proto",
}
